<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)> -> _SINK_
<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)> -> _SINK_
<java.io.File: boolean delete()> -> _SINK_
<javax.servlet.ServletOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SINK_
<java.io.PrintWriter: void flush()> -> _SINK_
<org.slf4j.Logger: void info(org.slf4j.Marker,java.lang.String)> -> _SINK_
<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)> -> _SINK_
<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.String getHeader(java.lang.String)> -> _SOURCE_
<net.logstash.logback.marker.Markers: net.logstash.logback.marker.LogstashMarker appendEntries(java.util.Map)> -> _BOTH_
<cn.hutool.json.JSONUtil: cn.hutool.json.JSON parse(java.lang.Object)> -> _BOTH_
<synthetic.method.HttpServletRequestImpl: void <init>()> -> _SOURCE_
<synthetic.method.HttpServletResponseImpl: void <init>()> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession()> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: javax.servlet.http.HttpSession getSession()> -> _SOURCE_
<org.springframework.security.core.context.SecurityContext: org.springframework.security.core.Authentication getAuthentication()> -> _SOURCE_
<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteUser()> -> _SOURCE_
<synthetic.method.HttpServletRequestImpl: java.lang.String getRemoteUser()> -> _SOURCE_
<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()> -> _SOURCE_
<co.yiiu.pybbs.controller.front.IndexController: java.lang.String getemail()> -> _SOURCE_
<co.yiiu.pybbs.controller.front.IndexController: java.lang.String getcode()> -> _SOURCE_
<me.zhyd.oauth.model.AuthUser: java.lang.String getEmail()> -> _SOURCE_
<me.zhyd.oauth.model.AuthToken: java.lang.String getAccessToken()> -> _SOURCE_
<co.yiiu.pybbs.controller.front.IndexController: java.lang.String getkeyword()> -> _SOURCE_
<me.zhyd.oauth.model.AuthToken: java.lang.String getAccessToken()> -> _SOURCE_

<org.apache.shiro.cache.Cache: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _SINK_
<net.sf.ehcache.Cache: void put(net.sf.ehcache.Element)> -> _SINK_
<org.slf4j.Logger: void debug(java.lang.String)> -> _SINK_
<org.apache.tools.zip.ZipOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.tools.zip.ZipOutputStream: void putNextEntry(org.apache.tools.zip.ZipEntry)> -> _SINK_
<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])> -> _SINK_
<redis.clients.jedis.Jedis: java.lang.String set(byte[],byte[])> -> _SINK_
<redis.clients.jedis.Jedis: java.lang.Long rpush(java.lang.String,java.lang.String[])> -> _SINK_
<redis.clients.jedis.Jedis: java.lang.Long sadd(java.lang.String,java.lang.String[])> -> _SINK_
<redis.clients.jedis.Jedis: java.util.Map hgetAll(java.lang.String)> -> _SINK_
<redis.clients.jedis.Jedis: java.lang.String hmset(java.lang.String,java.util.Map)> -> _SINK_
<org.apache.commons.mail.HtmlEmail: java.lang.String send()> -> _SINK_
<org.apache.commons.mail.HtmlEmail: void setAuthentication(java.lang.String,java.lang.String)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)> -> _SINK_
<redis.clients.jedis.Jedis: java.lang.String set(java.lang.String,java.lang.String,redis.clients.jedis.params.SetParams)> -> _SINK_
%<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<org.springframework.security.crypto.password.PasswordEncoder: java.lang.String encode(java.lang.CharSequence)> -> _SOURCE_



% mall Source
<com.macro.mall.dto.UpdateAdminPasswordParam: void <init>()> -> _SOURCE_
<com.macro.mall.dto.OmsOrderQueryParam: void <init>()> -> _SOURCE_
<com.macro.mall.dto.OmsReceiverInfoParam: void <init>()> -> _SOURCE_
<com.macro.mall.dto.OmsReturnApplyQueryParam: void <init>()> -> _SOURCE_
<com.macro.mall.dto.OmsUpdateStatusParam: void <init>()> -> _SOURCE_
<com.macro.mall.dto.PmsProductQueryParam: void <init>()> -> _SOURCE_
<com.macro.mall.model.SmsHomeAdvertise: void <init>()> -> _SOURCE_
<com.macro.mall.dto.UmsAdminParam: void <init>()> -> _SOURCE_
<com.macro.mall.dto.UmsAdminLoginParam: void <init>()> -> _SOURCE_
<com.macro.mall.model.UmsAdmin: void <init>()> -> _SOURCE_
<com.macro.mall.dto.UpdateAdminPasswordParam: void <init>()> -> _SOURCE_
<com.macro.mall.model.UmsResourceCategory: void <init>()> -> _SOURCE_
<com.macro.mall.model.UmsResource: void <init>()> -> _SOURCE_
<com.macro.mall.model.UmsRole: void <init>()> -> _SOURCE_


<com.macro.mall.demo.dto.PmsBrandDto: void <init>()> -> _SOURCE_
<com.macro.mall.model.PmsBrand: void <init>()> -> _SOURCE_

<com.macro.mall.portal.domain.MemberBrandAttention: void <init>()> -> _SOURCE_
<com.macro.mall.portal.domain.MemberProductCollection: void <init>()> -> _SOURCE_
<com.macro.mall.portal.domain.MemberReadHistory: void <init>()> -> _SOURCE_
<com.macro.mall.model.OmsCartItem: void <init>()> -> _SOURCE_
<com.macro.mall.portal.domain.OrderParam: void <init> -> _SOURCE_
<com.macro.mall.portal.domain.OmsOrderReturnApplyParam: void <init>()> -> _SOURCE_
<com.macro.mall.model.UmsMemberReceiveAddress: void <init>()> -> _SOURCE_
<com.macro.mall.portal.controller.UmsMemberController$$SpringCGLIB: java.lang.String getpassword()>  -> _SOURCE_
<com.macro.mall.search.controller.EsProductController$$SpringCGLIB: java.lang.String getkeyword()>  -> _SOURCE_


% shopizer source
<com.salesmanager.shop.model.customer.SecuredShopPersistableCustomer: void <init>()> -> _SOURCE_
<com.salesmanager.shop.model.customer.CustomerPassword: void <init>()> -> _SOURCE_
<com.salesmanager.core.model.customer.Customer: java.util.Set getAttributes()> -> _SOURCE_
<com.salesmanager.shop.model.customer.SecuredCustomer: void <init>()> -> _SOURCE_
<com.salesmanager.shop.model.catalog.product.PersistableProductReview: void <init>()> -> _SOURCE_
<com.salesmanager.shop.model.customer.CustomerPassword: java.lang.String getCurrentPassword()> -> _SOURCE_
<com.salesmanager.core.model.customer.Customer: java.lang.String getPassword()> -> _SOURCE_
<com.salesmanager.core.model.customer.Customer: void setPassword(java.lang.String)> -> _SOURCE_
<com.salesmanager.core.model.user.User: java.lang.String getAdminPassword()> -> _SOURCE_
<com.salesmanager.core.model.system.IntegrationConfiguration: java.util.Map getIntegrationKeys()> -> _SOURCE_

% shopizer sink
% <org.springframework.mail.javamail.JavaMailSender: void send(org.springframework.mail.javamail.MimeMessagePreparator)> -> _SINK_
<org.apache.xalan.xsltc.runtime.BasisLibrary: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)> -> _SINK_
<org.apache.axis2.description.AxisService: void printWSDLError(java.io.OutputStream)> -> _SINK_
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(char[])> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)> -> _SINK_
<net.sourceforge.pebble.domain.Comment: void setAuthenticated(boolean)> -> _SINK_
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void runAfterTransactionMethods(org.springframework.test.context.TestContext)> -> _SINK_
<org.apache.stratos.cli.StratosApplication: int run(java.lang.String[])> -> _SINK_
<org.owasp.webgoat.session.ParameterParser: void update(javax.servlet.ServletRequest)> -> _SINK_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence)> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)> -> _SINK_
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> -> _SINK_
<org.apache.bcel.util.JavaWrapper: void runMain(java.lang.String,java.lang.String[])> -> _SINK_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.Object parse(java.lang.String,java.util.Locale)> -> _SINK_
<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.owasp.webgoat.session.DatabaseUtilities: java.sql.Connection getHsqldbConnection(java.lang.String,org.owasp.webgoat.session.WebgoatContext)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)> -> _SINK_
<org.springframework.mock.web.MockBodyContent: void println(java.lang.String)> -> _SINK_
<org.owasp.webgoat.HammerHead: void log(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SINK_
<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<org.owasp.webgoat.session.LessonSession: void setAuthenticated(boolean)> -> _SINK_
<org.springframework.orm.hibernate3.support.ClobStringType: int[] sqlTypes)> -> _SINK_
<org.owasp.webgoat.session.WebSession: void update(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)> -> _SINK_
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)> -> _SINK_
<com.novell.ldap.rfc2251.RfcFilter: void addSubstring(int,byte[])> -> _SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)> -> _SINK_
<org.xmldb.api.base.XMLDBException: void printStackTrace(java.io.PrintWriter)> -> _SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)> -> _SINK_
<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)> -> _SINK_
<org.apache.xalan.xsltc.compiler.util.Util: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<org.apache.commons.validator.util.ValidatorUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.google.json.JsonSanitizer: void replace(int,int,java.lang.String)> -> _SINK_
<org.owasp.esapi.reference.validation.StringValidationRule: void addBlacklistPattern(java.util.regex.Pattern)> -> _SINK_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence,int,int)> -> _SINK_
<org.springframework.security.util.FieldUtils: void setProtectedFieldValue(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.springframework.mock.web.MockBodyContent: void println(char[])> -> _SINK_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)> -> _SINK_
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)> -> _SINK_
<org.springframework.orm.hibernate3.TypeDefinitionBean: void setParameters(java.util.Properties)> -> _SINK_
<org.springframework.format.datetime.joda.DateTimeParser: org.joda.time.DateTime parse(java.lang.String,java.util.Locale)> -> _SINK_
%<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> -> _SINK_
<org.springframework.mock.web.MockJspWriter: void println(java.lang.String)> -> _SINK_
<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> -> _SINK_
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SINK_
<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)> -> _SINK_
<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)> -> _SINK_
<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> -> _SINK_
<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)> -> _SINK_
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)> -> _SINK_
<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)> -> _SINK_
<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)> -> _SINK_
<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)> -> _SINK_

<org.springframework.security.config.http.CsrfBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getCsrfLogoutHandler)> -> _SOURCE_
<org.springframework.security.config.authentication.CachingUserDetailsService: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)> -> _SOURCE_
<org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper: org.springframework.security.core.userdetails.UserDetails loadUserDetails(org.springframework.security.core.Authentication)> -> _SOURCE_
<java.io.File: java.io.File getAbsoluteFile)> -> _SOURCE_
<org.apache.commons.jxpath.ri.parser.XPathParser: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginPage)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String getRealPath(java.lang.String)> -> _SOURCE_
<com.google.auth.oauth2.UserCredentials: java.lang.String getClientSecret)> -> _SOURCE_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createQueryString(java.util.List,java.util.Set,boolean)> -> _SOURCE_
<org.springframework.messaging.simp.stomp.StompDecoder: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)> -> _SOURCE_
<java.io.File: java.io.File getCanonicalFile)> -> _SOURCE_
<org.apache.commons.jxpath.ri.JXPathContextReferenceImpl: java.lang.Object getValue(java.lang.String)> -> _SOURCE_
<org.apache.xmlrpc.webserver.RequestData: java.lang.String getMethod)> -> _SOURCE_
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentials(com.google.api.client.http.HttpTransport)> -> _SOURCE_
<org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.springframework.util.DefaultPropertiesPersister: java.lang.String unescape(java.lang.String)> -> _SOURCE_
<org.owasp.webgoat.plugins.Plugin: void loadFiles(java.nio.file.Path)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletResponseImpl: java.lang.String getHeader(java.lang.String)> -> _SOURCE_
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentialsFromCode(java.lang.String,java.net.URI)> -> _SOURCE_
<org.dmfs.oauth2.client.http.requests.ResourceOwnerPasswordTokenRequest: org.dmfs.httpclient.HttpRequestEntity requestEntity)> -> _SOURCE_
<org.owasp.webgoat.util.HtmlEncoder: java.lang.String decode(java.lang.String)> -> _SOURCE_
<javax.naming.ldap.Rdn: java.lang.Object unescapeValue(java.lang.String)> -> _SOURCE_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl getConfig(javax.servlet.http.HttpServletRequest)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parsePostData(java.util.Map,java.io.InputStream,java.lang.String)> -> _SOURCE_
<org.springframework.security.concurrent.DelegatingSecurityContextExecutorService: java.util.concurrent.ExecutorService getDelegate)> -> _SOURCE_
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.HeadersConfigurer headers)> -> _SOURCE_
<org.springframework.web.servlet.tags.EscapeBodyTag: java.lang.String readBodyContent)> -> _SOURCE_
<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SOURCE_
<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder requestAttr(java.lang.String,java.lang.Object)> -> _SOURCE_
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentials(java.lang.String)> -> _SOURCE_
<org.springframework.web.socket.sockjs.transport.handler.JsonpReceivingTransportHandler: java.lang.String[] readMessages(org.springframework.http.server.ServerHttpRequest)> -> _SOURCE_
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentialsUnsynchronized(com.google.api.client.http.HttpTransport)> -> _SOURCE_
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginProcessingUrl)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String readLine(byte[])> -> _SOURCE_
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getLogoutRequestMatcher(java.lang.String)> -> _SOURCE_
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.util.List getLogoutHandlers)> -> _SOURCE_
<org.apache.xmlrpc.webserver.RequestData: java.lang.String getHttpVersion)> -> _SOURCE_
<com.novell.ldap.rfc2251.RfcFilter: byte[] unescapeString(java.lang.String)> -> _SOURCE_
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SOURCE_
<com.google.auth.oauth2.DefaultCredentialsProvider: java.io.File getWellKnownCredentialsFile)> -> _SOURCE_
<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parseParameters)> -> _SOURCE_
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)> -> _SOURCE_
<javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)> -> _SOURCE_

<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()> -> _SOURCE_

<java.net.URLConnection: void connect()> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _BOTH_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_

<java.net.URL: java.io.InputStream openStream()> -> _BOTH_
<java.net.URL: java.lang.Object getContent()> -> _BOTH_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _BOTH_

<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_

<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_

% Covered by the EasyTaintWrapper given that the HttpEntity is tainted
%<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> -> _SOURCE_

<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_

<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_

<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.Process start()> -> _SINK_

%<com.huawei.modelcontroller.ModelOneController: void getDataFromSerialization(com.huawei.bean.TokenBeanWeb)> -> _SOURCE_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_


%<type name="infoLeak" scope="function" className="java.io.PrintWriter">.*(?i)println.*</type>
<java.io.PrintWriter: void println()> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<java.io.PrintWriter: void println(char)> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<java.io.PrintWriter: void println(long)> -> _SINK_
<java.io.PrintWriter: void println(float)> -> _SINK_
<java.io.PrintWriter: void println(double)> -> _SINK_
<java.io.PrintWriter: void println(char[])> -> _SINK_
<java.io.PrintWriter: void println(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.Object)> -> _SINK_

%<type name="infoLeak" scope="function" className="com.alibaba.excel.write.builder.ExcelWriterSheetBuilder">.*(?i)doWrite.*</type>
<com.alibaba.excel.write.builder.ExcelWriterSheetBuilder: void doWrite(java.util.List)> -> _SINK_

%<type name="infoLeak" scope="function" className="com.baomidou.mybatisplus.extension.service.IService">.*(?i)save.*</type>
<com.baomidou.mybatisplus.extension.service.IService: boolean save(java.lang.Object)> -> _SINK_
<com.baomidou.mybatisplus.extension.service.IService: boolean saveBatch(java.util.Collection)> -> _SINK_
<com.baomidou.mybatisplus.extension.service.IService: boolean saveBatch(java.util.Collection,int)> -> _SINK_
<com.baomidou.mybatisplus.extension.service.IService: boolean saveOrUpdateBatch(java.util.Collection)> -> _SINK_
<com.baomidou.mybatisplus.extension.service.IService: boolean saveOrUpdateBatch(java.util.Collection,int)> -> _SINK_
<com.baomidou.mybatisplus.extension.service.IService: boolean saveOrUpdate(java.lang.Object)> -> _SINK_
<com.baomidou.mybatisplus.extension.service.IService: boolean saveOrUpdate(java.lang.Object,com.baomidou.mybatisplus.core.conditions.Wrapper)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.FileWriter">.*(?i)write.*</type>
%没有，FileWriter这个类里面只有一些构造方法。

%<type name="infoLeak" scope="function" className="java.io.PrintWriter">.*(?i)printf.*</type>
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_

%<type name="infoLeak" scope="function" className="com.alibaba.excel.EasyExcel">.*(?i)write.*</type>
%只有一个构造方法

%<type name="infoLeak" scope="function" className="java.io.RandomAccessFile">.*(?i)write.*</type>
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void write0(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void writeBoolean(boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeByte(int)> -> _SINK_
<java.io.RandomAccessFile: void writeShort(int)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.RandomAccessFile">.*(?i)writeUTF.*</type>
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
%重复

%<type name="infoLeak" scope="function" className="org.apache.poi.hssf.usermodel.HSSFCell">.*(?i)setCellValue.*</type>
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValueImpl(double)> -> _SINK_
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValueImpl(java.util.Date)> -> _SINK_
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValueImpl(java.time.LocalDateTime)> -> _SINK_
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValueImpl(java.util.Calendar)> -> _SINK_
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValueImpl(java.lang.String)> -> _SINK_
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValueImpl(org.apache.poi.ss.usermodel.RichTextString)> -> _SINK_
<org.apache.poi.hssf.usermodel.HSSFCell: void setCellValue(boolean)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.Write">.*(?i)write.*</type>
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.BufferedWriter">.*(?i)write.*</type>
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.OutputStreamWriter">.*(?i)write.*</type>
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.FileOutputStream">.*(?i)write.*</type>
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.DataOutputStream">.*(?i)write.*</type>
<java.io.DataOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: int writeUTF(java.lang.String,java.io.DataOutput)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.DataOutputStream">.*(?i)writeBytes.*</type>
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
%重复

%<type name="infoLeak" scope="function" className="java.io.ObjectOutputStream">.*(?i)write.*</type>
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeFields()> -> _SINK_
<java.io.ObjectOutputStream: void writeStreamHeader()> -> _SINK_
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[])> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeTypeString(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeNull()> -> _SINK_
<java.io.ObjectOutputStream: void writeHandle(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeClass(java.lang.Class,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeClassDesc(java.io.ObjectStreamClass,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeProxyDesc(java.io.ObjectStreamClass,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeNonProxyDesc(java.io.ObjectStreamClass,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeString(java.lang.String,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeArray(java.lang.Object,java.io.ObjectStreamClass,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeEnum(java.lang.Enum,java.io.ObjectStreamClass,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeOrdinaryObject(java.lang.Object,java.io.ObjectStreamClass,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeExternalData(java.io.Externalizable)> -> _SINK_
<java.io.ObjectOutputStream: void writeSerialData(java.lang.Object,java.io.ObjectStreamClass)> -> _SINK_
<java.io.ObjectOutputStream: void writeFatalException(java.io.IOException)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass)> -> _SINK_
<java.io.ObjectOutputStream: void defaultWriteObject()> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.ObjectOutputStream">.*(?i)writeObject.*</type>
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject0(java.lang.Object,boolean)> -> _SINK_
<java.io.ObjectOutputStream: void defaultWriteObject()> -> _SINK_
%全部重复

%<type name="infoLeak" scope="function" className="org.slf4j.Logger">.*(?i)info.*</type>
<org.slf4j.Logger: void info(java.lang.String)> -> _SINK_
<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.slf4j.Logger: void info(org.slf4j.Marker,java.lang.String)> -> _SINK_
<org.slf4j.Logger: void info(org.slf4j.Marker,java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void info(org.slf4j.Marker,java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)> -> _SINK_

%<type name="infoLeak" scope="function" className="org.slf4j.Logger">.*(?i)debug.*</type>
<org.slf4j.Logger: void debug(java.lang.String)> -> _SINK_
<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.slf4j.Logger: void debug(org.slf4j.Marker,java.lang.String)> -> _SINK_
<org.slf4j.Logger: void debug(org.slf4j.Marker,java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)> -> _SINK_

%<type name="infoLeak" scope="function" className="org.slf4j.Logger">.*(?i)warn.*</type>
<org.slf4j.Logger: void warn(java.lang.String)> -> _SINK_
<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.slf4j.Logger: void warn(org.slf4j.Marker,java.lang.String)> -> _SINK_
<org.slf4j.Logger: void warn(org.slf4j.Marker,java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)> -> _SINK_

%<type name="infoLeak" scope="function" className="org.slf4j.Logger">.*(?i)error.*</type>
<org.slf4j.Logger: void error(java.lang.String)> -> _SINK_
<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)> -> _SINK_
<org.slf4j.Logger: void error(org.slf4j.Marker,java.lang.String)> -> _SINK_
<org.slf4j.Logger: void error(org.slf4j.Marker,java.lang.String,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.slf4j.Logger: void error(org.slf4j.Marker,java.lang.String,java.lang.Object[])> -> _SINK_
<org.slf4j.Logger: void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)> -> _SINK_

%<type name="infoLeak" scope="function" className="java.io.PrintStream">.*(?i)println.*</type>
<java.io.PrintStream: void println()> -> _SINK_
<java.io.PrintStream: void println(boolean)> -> _SINK_
<java.io.PrintStream: void println(char)> -> _SINK_
<java.io.PrintStream: void println(int)> -> _SINK_
<java.io.PrintStream: void println(long)> -> _SINK_
<java.io.PrintStream: void println(float)> -> _SINK_
<java.io.PrintStream: void println(double)> -> _SINK_
<java.io.PrintStream: void println(char[])> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SINK_



%jeespring-web-3.0.0
<com.company.project.modules.ylttrip.entity.TfTicket: void <init>()> -> _SOURCE_
%<com.company.project.modules.ylttrip.service.ITfTicketService: java.util.List findListCache(java.lang.Object)> -> _SINK_
<com.jeespring.common.web.Result: void setResultObject(java.lang.Object)> -> _SINK_




% jeesite
<com.thinkgem.jeesite.modules.act.web.ActModelController: java.lang.String getid()> -> _SOURCE_
<com.thinkgem.jeesite.common.utils.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)> -> _SINK_
<com.thinkgem.jeesite.modules.sys.utils.UserUtils: com.thinkgem.jeesite.modules.sys.security.SystemAuthorizingRealm$Principal getPrincipal()> -> _SOURCE_
<com.thinkgem.jeesite.modules.act.entity.Act: void <init>()> -> _SOURCE_
<org.activiti.engine.history.HistoricTaskInstanceQuery: org.activiti.engine.history.HistoricTaskInstanceQuery taskCompletedAfter(java.util.Date)> -> _SINK_
<org.activiti.engine.history.HistoricTaskInstanceQuery: org.activiti.engine.history.HistoricTaskInstanceQuery taskCompletedBefore(java.util.Date)> -> _SINK_
<com.thinkgem.jeesite.modules.sys.utils.UserUtils: com.thinkgem.jeesite.modules.sys.entity.User getByLoginName(java.lang.String)> -> _SOURCE_
<com.thinkgem.jeesite.common.persistence.Page: void <init> -> _SOURCE_
<com.thinkgem.jeesite.modules.act.service.ActModelService: com.thinkgem.jeesite.common.persistence.Page modelList(com.thinkgem.jeesite.common.persistence.Page,java.lang.String)> -> _SOURCE_
<com.thinkgem.jeesite.modules.act.service.ActModelService: org.activiti.engine.repository.Model create(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
%<org.springframework.web.multipart.MultipartFile: java.lang.String getOriginalFilename()> -> _SOURCE_
<com.thinkgem.jeesite.modules.act.service.ActProcessService: java.lang.String updateState(java.lang.String,java.lang.String)> -> _SOURCE_
<org.springframework.web.servlet.mvc.support.RedirectAttributes: org.springframework.web.servlet.mvc.support.RedirectAttributes addFlashAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<com.thinkgem.jeesite.modules.act.entity.Act: void <init>()> -> _SOURCE_
<com.thinkgem.jeesite.modules.sys.utils.UserUtils: com.thinkgem.jeesite.modules.sys.entity.User getUser()> -> _SOURCE_
<com.thinkgem.jeesite.modules.sys.entity.Role: void setRoleType(java.lang.String)> -> _SOURCE_
<com.thinkgem.jeesite.modules.sys.entity.User: void setPassword(java.lang.String)> -> _SOURCE_
%<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()> -> _SOURCE_


%FEBS-Shiro-2.0
<cc.mrbird.febs.common.utils.FebsUtil: java.lang.String underscoreToCamel(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.generator.entity.GeneratorConfig: void setClassName(java.lang.String)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateCodeFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateEntityFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateMapperFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateMapperXmlFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateServiceFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateServiceImplFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_
%<cc.mrbird.febs.generator.helper.GeneratorHelper: void generateControllerFile(java.util.List,cc.mrbird.febs.generator.entity.GeneratorConfig)> -> _SINK_

<org.apache.shiro.authc.UsernamePasswordToken: void <init>(java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<cc.mrbird.febs.common.controller.BaseController: void login(org.apache.shiro.authc.AuthenticationToken)> -> _SINK_

%<cc.mrbird.febs.common.properties.ShiroProperties: java.lang.String getSuccessUrl()> -> _SOURCE_
%<cc.mrbird.febs.common.properties.FebsProperties: cc.mrbird.febs.common.properties.ShiroProperties getShiro()> -> _SOURCE_
%<cc.mrbird.febs.common.entity.FebsResponse: void <init>()> -> _SINK_

<cc.mrbird.febs.monitor.service.ILoginLogService: java.util.Map retrieveIndexPageData(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.common.entity.FebsResponse: cc.mrbird.febs.common.entity.FebsResponse data(java.lang.Object)> -> _SINK_
%<cc.mrbird.febs.common.entity.FebsResponse: cc.mrbird.febs.common.entity.FebsResponse success()> -> _SINK_
%<cc.mrbird.febs.common.entity.FebsResponse: void <init>()> -> _SINK_

<cc.mrbird.febs.system.service.IMenuService: cc.mrbird.febs.common.entity.MenuTree findUserMenus(java.lang.String)> -> _SOURCE_

%<cc.mrbird.febs.system.mapper.MenuMapper: java.util.List findUserMenus(java.lang.String)> -> _SOURCE_
%<cc.mrbird.febs.common.utils.TreeUtil: cc.mrbird.febs.common.entity.MenuTree buildMenuTree(java.util.List)> -> _SINK_

%<cc.mrbird.febs.system.service.IMenuService: cc.mrbird.febs.common.entity.MenuTree findMenus(cc.mrbird.febs.system.entity.Menu)> -> _SOURCE_

<cc.mrbird.febs.system.service.IRoleService: java.util.List findRoles(cc.mrbird.febs.system.entity.Role)> -> _SOURCE_

%<cc.mrbird.febs.system.service.IRoleService: com.baomidou.mybatisplus.core.metadata.IPage findRoles(cc.mrbird.febs.system.entity.Role,cc.mrbird.febs.common.entity.QueryRequest)> -> _SOURCE_
%<cc.mrbird.febs.system.controller.RoleController: java.util.Map getDataTable(com.baomidou.mybatisplus.core.metadata.IPage)> -> _SINK_
%<cc.mrbird.febs.common.controller.BaseController: java.util.Map getDataTable(java.lang.Object,java.lang.Object)>

%<cc.mrbird.febs.system.service.IUserService: cc.mrbird.febs.system.entity.User findUserDetailList(java.lang.String)> -> _SOURCE_

%<cc.mrbird.febs.system.entity.User: java.lang.Long getUserId()> -> _SOURCE_
<cc.mrbird.febs.system.service.IUserService: void updateUser(cc.mrbird.febs.system.entity.User)> -> _SINK_
%<cc.mrbird.febs.system.service.impl.UserServiceImpl: void updateUser(cc.mrbird.febs.system.entity.User)> -> _SINK_
<cc.mrbird.febs.system.entity.User: void setPassword(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setUsername(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setModifyTime(java.util.Date)> -> _SOURCE_
%<cc.mrbird.febs.system.service.impl.UserServiceImpl: boolean updateById(java.lang.Object)> -> _SINK_
%<cc.mrbird.febs.system.service.impl.UserServiceImpl: void setUserRoles(cc.mrbird.febs.system.entity.User,java.lang.String[])> -> _SINK_
%<cc.mrbird.febs.system.service.impl.UserServiceImpl: void setUserDataPermissions(cc.mrbird.febs.system.entity.User,java.lang.String[])> -> _SINK_
%<cc.mrbird.febs.common.event.UserAuthenticationUpdatedEventPublisher: void publishEvent(java.util.Set)> -> _SINK_

<cc.mrbird.febs.system.entity.User: void setCreateTime(java.util.Date)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setStatus(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setSex(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setAvatar(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setTheme(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setIsTab(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.entity.User: void setDescription(java.lang.String)> -> _SOURCE_
<cc.mrbird.febs.system.service.IUserRoleService: boolean save(java.lang.Object)> -> _SINK_
<me.zhyd.oauth.model.AuthUser: void <init>()> -> _SINK_





%pybbs
<org.apache.shiro.SecurityUtils: org.apache.shiro.subject.Subject getSubject()> -> _SOURCE_
<java.lang.management.ManagementFactory: java.lang.management.OperatingSystemMXBean getOperatingSystemMXBean()> -> _SOURCE_
<com.sun.management.OperatingSystemMXBean: long getTotalPhysicalMemorySize()> -> _SOURCE_
<com.sun.management.OperatingSystemMXBean: double getSystemCpuLoad()> -> _SOURCE_
<com.sun.management.OperatingSystemMXBean: double getProcessCpuLoad()> -> _SOURCE_
<org.apache.shiro.web.util.WebUtils: org.apache.shiro.web.util.SavedRequest getSavedRequest(javax.servlet.ServletRequest)> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.IndexAdminController: java.lang.String getusername()> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.IndexAdminController: java.lang.String getpassword()> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.IndexAdminController: java.lang.String getcode()> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.CommentAdminController: java.lang.String getusername()> -> _SOURCE_
<co.yiiu.pybbs.model.Permission: java.lang.Integer getId()> -> _SOURCE_
<co.yiiu.pybbs.model.Permission: void <init>()> -> _SOURCE_
<co.yiiu.pybbs.model.Permission: void setPid(java.lang.Integer)> -> _SOURCE_
<co.yiiu.pybbs.model.User: java.lang.String getPassword()> -> _SOURCE_
<co.yiiu.pybbs.controller.api.CommentApiController: co.yiiu.pybbs.model.User getApiUser()> -> _SOURCE_
<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()> -> _SOURCE_
<co.yiiu.pybbs.controller.api.CollectApiController: co.yiiu.pybbs.model.User getApiUser()> -> _SOURCE_
<co.yiiu.pybbs.model.AdminUser: void setPassword(java.lang.String)> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.RoleAdminController: java.lang.String getname()> -> _SOURCE_
<org.springframework.web.multipart.MultipartFile: java.io.InputStream getInputStream()> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.TagAdminController: java.lang.String getname()> -> _SOURCE_
<co.yiiu.pybbs.controller.admin.TopicAdminController: java.lang.String getusername()> -> _SOURCE_
<co.yiiu.pybbs.controller.api.UserApiController: java.lang.String getusername()> -> _SOURCE_
<co.yiiu.pybbs.plugin.RedisService: void setString(java.lang.String,java.lang.String,int)> -> _SOURCE_
<redis.clients.jedis.Jedis: java.lang.String set(java.lang.String,java.lang.String,redis.clients.jedis.params.SetParams)> -> _SOURCE_

<org.springframework.web.servlet.mvc.support.RedirectAttributes: org.springframework.web.servlet.mvc.support.RedirectAttributes addFlashAttribute(java.lang.String,java.lang.Object)> -> _SINK_


%ForestBlog
%<com.liuyanzhao.ssm.blog.service.ArticleService: java.util.List listRecentArticle(java.lang.Integer,java.lang.Integer)> -> _SINK_
%<com.liuyanzhao.ssm.blog.service.CommentService: java.util.List listRecentComment(java.lang.Integer,java.lang.Integer)> -> _SINK_

%<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
%<javax.servlet.http.HttpServletResponse: void addCookie(javax.servlet.http.Cookie)> -> _SINK_

%<com.liuyanzhao.ssm.blog.service.UserService: com.liuyanzhao.ssm.blog.entity.User getUserByNameOrEmail(java.lang.String)> -> _SOURCE_
%<javax.servlet.http.HttpSession: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
%<com.liuyanzhao.ssm.blog.service.UserService: void updateUser(com.liuyanzhao.ssm.blog.entity.User)> -> _SINK_

%<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.entity.User: void setUserAvatar(java.lang.String)> -> _SINK_
%<com.liuyanzhao.ssm.blog.entity.User: void setUserName(java.lang.String)> -> _SINK_
%<com.liuyanzhao.ssm.blog.entity.User: void setUserNickname(java.lang.String)> -> _SINK_
%<com.liuyanzhao.ssm.blog.entity.User: void setUserPass(java.lang.String)> -> _SINK_
%<com.liuyanzhao.ssm.blog.entity.User: void setUserEmail(java.lang.String)> -> _SINK_
%<com.liuyanzhao.ssm.blog.service.UserService: com.liuyanzhao.ssm.blog.entity.User insertUser(com.liuyanzhao.ssm.blog.entity.User)> -> _SINK_

%<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.String,java.lang.Object)> -> _SINK_

%<com.liuyanzhao.ssm.blog.service.CategoryService: java.util.List listCategory()> -> _SOURCE_

%<com.liuyanzhao.ssm.blog.dto.ArticleParam: java.lang.String getArticleThumbnail()> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.entity.Article: void setArticleThumbnail(java.lang.String)> -> _SINK_
%<cn.hutool.http.HtmlUtil: java.lang.String cleanHtmlTag(java.lang.String)> -> _SINK_

%<com.liuyanzhao.ssm.blog.dto.ArticleParam: java.lang.String getArticleTitle()> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.service.ArticleService: void insertArticle(com.liuyanzhao.ssm.blog.entity.Article)> -> _SINK_

%<com.liuyanzhao.ssm.blog.service.CategoryService: java.util.List listCategoryWithCount()> -> _SOURCE_
%<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.String,java.lang.Object)> -> _SINK_

%<com.liuyanzhao.ssm.blog.entity.User: java.lang.Integer getUserId()> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.entity.Comment: void setCommentUserId(java.lang.Integer)> -> _SINK_

%<com.liuyanzhao.ssm.blog.enums.ArticleStatus: java.lang.Integer getValue()> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.service.ArticleService: com.github.pagehelper.PageInfo pageArticle(java.lang.Integer,java.lang.Integer,java.util.HashMap)> -> _SINK_

%<com.liuyanzhao.ssm.blog.entity.Article: java.lang.Integer getArticleUserId()> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.entity.Article: void setUser(com.liuyanzhao.ssm.blog.entity.User)> -> _SINK_

%<com.liuyanzhao.ssm.blog.service.ArticleService: java.util.List listCategoryIdByArticleId(java.lang.Integer)> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.service.ArticleService: java.util.List listArticleByCategoryIds(java.util.List,java.lang.Integer)> -> _SINK_
%<com.liuyanzhao.ssm.blog.controller.home.IndexController: java.lang.String getkeywords()> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.service.ArticleService: com.github.pagehelper.PageInfo pageArticle(java.lang.Integer,java.lang.Integer,java.util.HashMap)> -> _SINK_

%<com.liuyanzhao.ssm.blog.entity.Notice: void setNoticeCreateTime(java.util.Date)> -> _SOURCE_
%<com.liuyanzhao.ssm.blog.service.NoticeService: void insertNotice(com.liuyanzhao.ssm.blog.entity.Notice)> -> _SINK_
%<com.liuyanzhao.ssm.blog.service.OptionsService: com.liuyanzhao.ssm.blog.entity.Options getOptions()>

%<org.springframework.web.multipart.MultipartFile: java.lang.String getOriginalFilename()> -> _SOURCE_
<org.springframework.web.multipart.MultipartFile: void transferTo(java.io.File)> _SINK_
<com.liuyanzhao.ssm.blog.dto.UploadFileVO: void setTitle(java.lang.String)> -> _SINK_
<com.liuyanzhao.ssm.blog.dto.UploadFileVO: void setSrc(java.lang.String)> _SINK_
<com.liuyanzhao.ssm.blog.dto.JsonResult: com.liuyanzhao.ssm.blog.dto.JsonResult ok(java.lang.Object)> _SINK_



%WebGoat
<org.owasp.webwolf.mailbox.Email: void <init>()> -> _SOURCE_
<org.owasp.webwolf.user.UserForm: java.lang.String getPassword()> -> _SOURCE_
<org.springframework.security.core.Authentication: java.lang.Object getPrincipal()> -> _SOURCE_
<org.owasp.webwolf.user.UserForm: void setPassword(java.lang.String)> -> _SOURCE_
<org.owasp.webwolf.user.UserForm: void setMatchingPassword(java.lang.String)> -> _SOURCE_
<org.springframework.web.multipart.MultipartFile: void transferTo(java.io.File)> -> _SOURCE_
<java.io.File: void <init>(java.lang.String,java.lang.String)> -> _SOURCE_

% SpringBlog
<com.raysmond.blog.forms.UserForm: void setPassword(java.lang.String)> -> _SOURCE_
<com.raysmond.blog.forms.UserForm: void setNewPassword(java.lang.String)> -> _SOURCE_
<com.raysmond.blog.forms.UserForm: void <init>()> -> _SOURCE_


